{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StoryItem","props","style","textAlign","margin","title","author","date","href","url","App","state","searchInput","searchCriteria","searchHits","submitClicked","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","fetchByAuthor","fetchByStory","userInput","fetch","then","response","json","parsedJSON","hits","map","hit","created_at","catch","error","console","log","className","onSubmit","this","onChange","item","index","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.debae7d6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport leftPad from 'left-pad';\n\nclass App extends React.Component {\n  state = {\n    searchInput: '',\n    searchCriteria: 'author',\n    searchHits: [],\n    submitClicked: false,\n  }\n\n  fetchByAuthor(userInput){\n    fetch(`http://hn.algolia.com/api/v1/search?tags=story,author_${userInput}`)\n    .then(response => response.json())\n    .then(parsedJSON => parsedJSON.hits.map(hit => (\n      {\n        title: `${hit.title}`,\n        author: `${hit.author}`,\n        date:`${hit.created_at}`,\n        url: `${hit.url}`,\n      }\n    )))\n    .then(searchHits => this.setState({\n      searchHits,\n    }))\n    .catch(error => console.log('parsing failed', error))\n  }\n\n  fetchByStory(userInput) {\n    fetch(`https://hn.algolia.com/api/v1/search?query=${userInput}&tags=story`)\n    .then(response => response.json())\n    .then(parsedJSON => parsedJSON.hits.map(hit => (\n      {\n        title: `${hit.title}`,\n        author: `${hit.author}`,\n        date:`${hit.created_at}`,\n        url: `${hit.url}`,\n      }\n    )))\n    .then(searchHits => this.setState({\n      searchHits: searchHits\n    }))\n    .catch(error => console.log('parsing failed', error))\n  }\n\n  handleChange = (event) => {\n    this.setState({ ...this.state, [event.target.name]: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState ({    \n      searchInput: '',\n      searchCriteria: 'author',\n      submitClicked: true,\n    })\n\n    if (this.state.searchCriteria === 'author') {\n      this.fetchByAuthor(this.state.searchInput)\n    } else {\n      this.fetchByStory(this.state.searchInput)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hacker News</h1>\n        <h2>Search:</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label> \n          <input name=\"searchInput\" value={this.state.searchInput} onChange={this.handleChange}></input>\n          </label>\n          <label style={{margin: \"10px\"}}> by\n            <select name=\"searchCriteria\" value={this.state.searchCriteria} onChange={this.handleChange} style={{margin: \"10px\"}}>\n              <option value=\"author\">Author (exact)</option>\n              <option value=\"story\">Story (containing)</option>\n            </select>\n          </label>\n          <br />\n          <button>Submit</button>\n        </form>\n        <div>\n          {this.state.submitClicked && \n            <h1 style={{textAlign: \"left\", margin: \"20px\"}}>Results:</h1>\n          }\n          {this.state.searchHits.map((item, index) => {\n            return (<StoryItem \n              key={index}\n              title={item.title}\n              author={item.author}\n              date={item.date}\n              url={item.url}\n            />\n            )\n          })}\n        </div>\n      </div>\n  );\n  }\n}\n\nfunction StoryItem(props) {\n  return (\n    <div style={{textAlign: 'left', margin: \"20px\"}}>\n      <h2>Title: {props.title}</h2>\n      <h3>Author: {props.author}</h3>\n      <h3>Date: {props.date}</h3>\n      <a href={props.url}>{props.url}</a>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}